#!/bin/sh
set -e

HAVE_CUDA=0
if [ -f /usr/include/cuda_runtime.h ]; then
    HAVE_CUDA=1
fi

BLAS_HOME=
BUILD_EXAMPLES=0
BUILD_GPU_EXAMPLES=0
BUILD_GTEST=0
BUILD_TESTS=0
CUDA_HOME=/usr/local/cuda
ENABLE_BLAS=0
ENABLE_CUDA=${HAVE_CUDA}
ENABLE_TRACE=0
USE_CLANG_TIDY=0
USE_CMAKE=1
VERBOSE=0

parse_args() {
    for i in "$@"; do
        case $i in
        --prefix=*)
            PREFIX="${i#*=}"
            ;;
        --with-blas=*)
            BLAS_HOME="${i#*=}"
            ;;
        --enable-blas)
            ENABLE_BLAS=1
            ;;
        --tests)
            BUILD_TESTS=1
            ;;
        --examples)
            BUILD_EXAMPLES=1
            ;;
        --gpu-examples)
            BUILD_GPU_EXAMPLES=1
            ;;
        --no-tests)
            BUILD_TESTS=0
            ;;
        --build-gtest)
            BUILD_GTEST=1
            ;;
        --tidy)
            USE_CLANG_TIDY=1
            ;;
        --simple)
            USE_CMAKE=0
            ;;
        --disable-cuda)
            ENABLE_CUDA=0
            ;;
        --enable-cuda)
            ENABLE_CUDA=1
            ;;
        --enable-trace)
            ENABLE_TRACE=1
            ;;
        --with-cuda=*)
            CUDA_HOME="${i#*=}"
            echo "configure --with-cuda=$CUDA_HOME"
            ;;
        --verbose)
            VERBOSE=1
            ;;
        --quiet)
            QUIET=1
            ;;
        *)
            echo "unknown argument $i"
            exit 1
            ;;
        esac
    done
}

. ./auto/cmake

add_cmake_prefixes() {
    add_cmake_prefix $HOME/local
    add_cmake_prefix $HOME/local/gtest
    add_cmake_prefix $HOME/local/openblas
}

add_cmake_flags() {
    if [ ${BUILD_TESTS} -eq 1 ]; then
        if [ ${BUILD_GTEST} -eq 1 ]; then
            pass_cmake_flag_from_env GTEST_GIT_URL
        fi
        add_cmake_flag BUILD_GTEST ${BUILD_GTEST}
    fi

    add_cmake_flag ENABLE_CUDA ${ENABLE_CUDA}
    add_cmake_flag BUILD_TESTS ${BUILD_TESTS}
    add_cmake_flag BUILD_EXAMPLES ${BUILD_EXAMPLES}
    add_cmake_flag BUILD_GPU_EXAMPLES ${BUILD_GPU_EXAMPLES}

    add_cmake_flag CMAKE_PREFIX_PATH $CMAKE_PREFIX_PATH

    add_cmake_flag CMAKE_INSTALL_PREFIX ${PREFIX}
    add_cmake_flag EXECUTABLE_OUTPUT_PATH $PWD/bin
    add_cmake_flag LIBRARY_OUTPUT_PATH $PWD/lib
    add_cmake_flag CMAKE_BUILD_TYPE Release

    add_cmake_flag CMAKE_EXPORT_COMPILE_COMMANDS ${VERBOSE}
    add_cmake_flag CMAKE_VERBOSE_MAKEFILE ${VERBOSE}

    add_cmake_flag USE_CLANG_TIDY ${USE_CLANG_TIDY}

    add_cmake_flag USE_OPENBLAS ${ENABLE_BLAS}
    if [ ! -z "${BLAS_HOME}" ]; then
        add_cmake_flag BLAS_HOME ${BLAS_HOME}
    fi

    pass_cmake_flag_from_env STDTRACER_GIT_URL
    pass_cmake_flag_from_env STDTENSOR_GIT_URL
    pass_cmake_flag_from_env STDNN_OPS_GIT_URL

    add_cmake_flag STDTRACER_GIT_TAG $(get_dep stdtracer)
    add_cmake_flag STDTENSOR_GIT_TAG $(get_dep stdtensor)
    add_cmake_flag STDNN_OPS_GIT_TAG $(get_dep stdnn-ops)

    if [ ${ENABLE_CUDA} -eq 1 ]; then
        pass_cmake_flag_from_env STDNN_OPS_CUDA_GIT_URL
        add_cmake_flag CUDA_TOOLKIT_ROOT_DIR $CUDA_HOME
        add_cmake_flag CMAKE_CUDA_COMPILER $CUDA_HOME/bin/nvcc
        add_cmake_flag STDNN_OPS_CUDA_GIT_TAG $(get_dep stdnn-ops-cuda)
    fi
    add_cmake_flag ENABLE_TRACE $ENABLE_TRACE
}

main() {
    echo "configure with $@"
    parse_args $@

    log_config_var BUILD_TESTS
    log_config_var BUILD_GTEST
    log_config_var BUILD_EXAMPLES
    log_config_var BUILD_GPU_EXAMPLES
    log_config_var ENABLE_BLAS
    log_config_var ENABLE_CUDA

    if [ ${USE_CMAKE} -eq 0 ]; then
        echo "TODO: support build without cmake"
        exit 1
    else
        config_cmake
    fi
}

main $@
