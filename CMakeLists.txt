CMAKE_MINIMUM_REQUIRED(VERSION 3.9)
PROJECT(nn-graph)

OPTION(USE_STRICT "Enable strict build options." OFF)
IF(USE_STRICT)
    ADD_DEFINITIONS(-Wall)
    IF(APPLE)
        ADD_DEFINITIONS(-Werror)
    ENDIF()
    ADD_DEFINITIONS(-Wfatal-errors)
ENDIF()

SET(CMAKE_CXX_STANDARD 17)

OPTION(USE_CLANG_TIDY "Use clang-tidy." OFF)
IF(USE_CLANG_TIDY)
    FIND_PROGRAM(CLANG_TIDY_EXE NAMES "clang-tidy")
    IF(CLANG_TIDY_EXE)
        MESSAGE(${CLANG_TIDY_EXE})
        SET(CMAKE_CXX_CLANG_TIDY clang-tidy)
    ENDIF()
ENDIF()

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

FIND_PACKAGE(stdtensor REQUIRED)
FIND_PACKAGE(stdnn-ops REQUIRED)
IF(${ENABLE_CUDA})
    FIND_PACKAGE(stdnn-ops-cuda REQUIRED)
    ADD_DEFINITIONS(-DNN_GRAPH_ENABLE_CUDA)
    INCLUDE_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/include)
    LINK_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/lib64)
ENDIF()

OPTION(USE_OPENBLAS "Build with blas." OFF)
SET(BLAS_HOME "" CACHE STRING "blas install dir")

IF(USE_OPENBLAS)
    MESSAGE("Using OpenBLAS")
    ADD_DEFINITIONS(-DSTDNN_OPS_HAVE_CBLAS)
    IF(APPLE)
        FIND_PACKAGE(OpenBLAS REQUIRED)
        INCLUDE_DIRECTORIES($ENV{HOME}/local/openblas/include)
        LINK_DIRECTORIES($ENV{HOME}/local/openblas/lib)
    ELSEIF(BLAS_HOME)
        INCLUDE_DIRECTORIES(${BLAS_HOME}/include)
        LINK_DIRECTORIES(${BLAS_HOME}/lib)
    ELSE()
        # https://cmake.org/cmake/help/v3.0/module/FindBLAS.html
        SET(BLA_VENDOR "OpenBLAS")
        FIND_PACKAGE(BLAS REQUIRED)
        INCLUDE_DIRECTORIES(${OpenBLAS_INCLUDE_DIRS})
    ENDIF()
ENDIF()

IF(${ENABLE_CUDA})
    # NOOP
ELSE()
    ADD_DEFINITIONS(-DUSE_FAKE_CUDA_RUNTIME=1)
ENDIF()

OPTION(BUILD_EXAMPLES "Build examples." OFF)

IF(BUILD_EXAMPLES)
    INCLUDE(cmake/examples.cmake)
ENDIF()

OPTION(BUILD_TESTS "Build tests." ON)

IF(BUILD_TESTS)
    ENABLE_TESTING()
    INCLUDE(cmake/tests.cmake)
ENDIF()
